
MYA-FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010ac  080010b4  000110b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010ac  080010ac  000110b4  2**0
                  CONTENTS
  4 .ARM          00000000  080010ac  080010ac  000110b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010ac  080010b4  000110b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010ac  080010ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  080010b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080010b4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e32  00000000  00000000  000110dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000487  00000000  00000000  00011f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000170  00000000  00000000  00012398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00012508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001b08  00000000  00000000  00012610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001965  00000000  00000000  00014118  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000059b6  00000000  00000000  00015a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000434  00000000  00000000  0001b4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001094 	.word	0x08001094

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001094 	.word	0x08001094

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	d1ed      	bne.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <dummy_delay>:

uint8_t a;
uint8_t bmpID;
/* end global variables */

void dummy_delay(uint32_t t){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	while(t--);
 8000634:	bf00      	nop
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1fa      	bne.n	8000636 <dummy_delay+0xa>
	return;
 8000640:	bf00      	nop

}
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <TIM2_IRQHandler>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void TIM2_IRQHandler(){
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

	return;
 800064e:	bf00      	nop
}
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
	...

08000658 <main>:


int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

	accX_raw = accY_raw = accZ_raw = 0;
 800065c:	4ba5      	ldr	r3, [pc, #660]	; (80008f4 <main+0x29c>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
 8000662:	4ba4      	ldr	r3, [pc, #656]	; (80008f4 <main+0x29c>)
 8000664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000668:	4ba3      	ldr	r3, [pc, #652]	; (80008f8 <main+0x2a0>)
 800066a:	801a      	strh	r2, [r3, #0]
 800066c:	4ba2      	ldr	r3, [pc, #648]	; (80008f8 <main+0x2a0>)
 800066e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000672:	4ba2      	ldr	r3, [pc, #648]	; (80008fc <main+0x2a4>)
 8000674:	801a      	strh	r2, [r3, #0]
	accX = accY = accZ = 0.0f;
 8000676:	4ba2      	ldr	r3, [pc, #648]	; (8000900 <main+0x2a8>)
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	4ba0      	ldr	r3, [pc, #640]	; (8000900 <main+0x2a8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4aa0      	ldr	r2, [pc, #640]	; (8000904 <main+0x2ac>)
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b9f      	ldr	r3, [pc, #636]	; (8000904 <main+0x2ac>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a9f      	ldr	r2, [pc, #636]	; (8000908 <main+0x2b0>)
 800068c:	6013      	str	r3, [r2, #0]
	gyroX_raw = gyroY_raw = gyroZ_raw = 0;
 800068e:	4b9f      	ldr	r3, [pc, #636]	; (800090c <main+0x2b4>)
 8000690:	2200      	movs	r2, #0
 8000692:	801a      	strh	r2, [r3, #0]
 8000694:	4b9d      	ldr	r3, [pc, #628]	; (800090c <main+0x2b4>)
 8000696:	f9b3 2000 	ldrsh.w	r2, [r3]
 800069a:	4b9d      	ldr	r3, [pc, #628]	; (8000910 <main+0x2b8>)
 800069c:	801a      	strh	r2, [r3, #0]
 800069e:	4b9c      	ldr	r3, [pc, #624]	; (8000910 <main+0x2b8>)
 80006a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006a4:	4b9b      	ldr	r3, [pc, #620]	; (8000914 <main+0x2bc>)
 80006a6:	801a      	strh	r2, [r3, #0]
	gyroX = gyroY = gyroZ = 0.0f;
 80006a8:	4b9b      	ldr	r3, [pc, #620]	; (8000918 <main+0x2c0>)
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	4b99      	ldr	r3, [pc, #612]	; (8000918 <main+0x2c0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a99      	ldr	r2, [pc, #612]	; (800091c <main+0x2c4>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b98      	ldr	r3, [pc, #608]	; (800091c <main+0x2c4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a98      	ldr	r2, [pc, #608]	; (8000920 <main+0x2c8>)
 80006be:	6013      	str	r3, [r2, #0]
	temperature = 0;
 80006c0:	4b98      	ldr	r3, [pc, #608]	; (8000924 <main+0x2cc>)
 80006c2:	f04f 0200 	mov.w	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]


	clock_config();
 80006c8:	f000 fc22 	bl	8000f10 <clock_config>
	GPIOA_EN(); // pwm
 80006cc:	4b96      	ldr	r3, [pc, #600]	; (8000928 <main+0x2d0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a95      	ldr	r2, [pc, #596]	; (8000928 <main+0x2d0>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
	GPIOB_EN(); // i2c
 80006d8:	4b93      	ldr	r3, [pc, #588]	; (8000928 <main+0x2d0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a92      	ldr	r2, [pc, #584]	; (8000928 <main+0x2d0>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
	GPIOC_EN(); // led
 80006e4:	4b90      	ldr	r3, [pc, #576]	; (8000928 <main+0x2d0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a8f      	ldr	r2, [pc, #572]	; (8000928 <main+0x2d0>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6193      	str	r3, [r2, #24]
	AFIO_EN();
 80006f0:	4b8d      	ldr	r3, [pc, #564]	; (8000928 <main+0x2d0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a8c      	ldr	r2, [pc, #560]	; (8000928 <main+0x2d0>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6193      	str	r3, [r2, #24]
	TIM2_EN(); // pwm
 80006fc:	4b8a      	ldr	r3, [pc, #552]	; (8000928 <main+0x2d0>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a89      	ldr	r2, [pc, #548]	; (8000928 <main+0x2d0>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	61d3      	str	r3, [r2, #28]
	DMA1_EN(); // for i2c read
 8000708:	4b87      	ldr	r3, [pc, #540]	; (8000928 <main+0x2d0>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a86      	ldr	r2, [pc, #536]	; (8000928 <main+0x2d0>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6153      	str	r3, [r2, #20]

	GPIOC->CRH = 0x300000;
 8000714:	4b85      	ldr	r3, [pc, #532]	; (800092c <main+0x2d4>)
 8000716:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800071a:	605a      	str	r2, [r3, #4]
	GPIOC->BSRR |= 0x2000;
 800071c:	4b83      	ldr	r3, [pc, #524]	; (800092c <main+0x2d4>)
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	4a82      	ldr	r2, [pc, #520]	; (800092c <main+0x2d4>)
 8000722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000726:	6113      	str	r3, [r2, #16]

	/* TIM2 PWM */
	GPIOA->CRL |= 0x01; // output mode for PA0(T2C1)
 8000728:	4b81      	ldr	r3, [pc, #516]	; (8000930 <main+0x2d8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a80      	ldr	r2, [pc, #512]	; (8000930 <main+0x2d8>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(0x0C);
 8000734:	4b7e      	ldr	r3, [pc, #504]	; (8000930 <main+0x2d8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a7d      	ldr	r2, [pc, #500]	; (8000930 <main+0x2d8>)
 800073a:	f023 030c 	bic.w	r3, r3, #12
 800073e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x08; // AF push-pull
 8000740:	4b7b      	ldr	r3, [pc, #492]	; (8000930 <main+0x2d8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <main+0x2d8>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 23; // Timer counts at 1 MHz
 800074c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000750:	2217      	movs	r2, #23
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 19999;  // set frequency of counter overflow to 50 Hz
 8000754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000758:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
	// CCR = 999 : 1000 us
	// CCR = 1999 : 2000 us
	// desired pulse width (us) = x ;
	// CCR = x - 1

	TIM2->CCR1 = 1299;
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	f240 5213 	movw	r2, #1299	; 0x513
 8000766:	635a      	str	r2, [r3, #52]	; 0x34

	// TIM2->DIER |= 0x01; // update interrupt enable

	TIM2->CCMR1 &= ~(0x03); // set CC1 channel as output channel
 8000768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000772:	f023 0303 	bic.w	r3, r3, #3
 8000776:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(0b111 << 4);
 8000778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000786:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0b110 << 4); // PWM mode 1
 8000788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000792:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000796:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= 0x01; // CC1E enable the channel
 8000798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= 0x01; // Counter Enable (CEN)
 80007a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]

	NVIC->ISER[0] |= 0x01 << 28; // enable TIM2 global interrupt
 80007b8:	4b5e      	ldr	r3, [pc, #376]	; (8000934 <main+0x2dc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a5d      	ldr	r2, [pc, #372]	; (8000934 <main+0x2dc>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6013      	str	r3, [r2, #0]

	/* GPIO configurations for I2C1 */

	GPIOB->CRL &= ~(0xF << 6*4);
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <main+0x2e0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a5b      	ldr	r2, [pc, #364]	; (8000938 <main+0x2e0>)
 80007ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80007ce:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xE << 6*4); // set PB6(SCL1) as AF output open-drain
 80007d0:	4b59      	ldr	r3, [pc, #356]	; (8000938 <main+0x2e0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a58      	ldr	r2, [pc, #352]	; (8000938 <main+0x2e0>)
 80007d6:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80007da:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &= ~(0xF << 7*4);
 80007dc:	4b56      	ldr	r3, [pc, #344]	; (8000938 <main+0x2e0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a55      	ldr	r2, [pc, #340]	; (8000938 <main+0x2e0>)
 80007e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80007e6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xE << 7*4); // set PB7(SDA1) as AF output open-drain
 80007e8:	4b53      	ldr	r3, [pc, #332]	; (8000938 <main+0x2e0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a52      	ldr	r2, [pc, #328]	; (8000938 <main+0x2e0>)
 80007ee:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80007f2:	6013      	str	r3, [r2, #0]

	/* I2C1 initiation */

	I2C1_EN();
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <main+0x2d0>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a4b      	ldr	r2, [pc, #300]	; (8000928 <main+0x2d0>)
 80007fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fe:	61d3      	str	r3, [r2, #28]
	i2c_init();
 8000800:	f000 f94a 	bl	8000a98 <i2c_init>
	bmpID = 99;
 8000804:	4b4d      	ldr	r3, [pc, #308]	; (800093c <main+0x2e4>)
 8000806:	2263      	movs	r2, #99	; 0x63
 8000808:	701a      	strb	r2, [r3, #0]

	//i2c_write_single_byte(0x77, 0xf4, 0x22);
	led_toggle(); // sensor ready
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4847      	ldr	r0, [pc, #284]	; (800092c <main+0x2d4>)
 8000810:	f000 f912 	bl	8000a38 <gpio_toggle>
	//bmpID = i2c_read_single_byte(0x77, 0xD0);


	/* MPU6050 initiation */

	mpu6050_wake_up();
 8000814:	f000 fb6a 	bl	8000eec <mpu6050_wake_up>
	dummy_delay(84000); // to stabilize the sensor
 8000818:	4849      	ldr	r0, [pc, #292]	; (8000940 <main+0x2e8>)
 800081a:	f7ff ff07 	bl	800062c <dummy_delay>


	mpu6050_i2c_bypass_en();
 800081e:	f000 fb6d 	bl	8000efc <mpu6050_i2c_bypass_en>

	//i2c_write_single_byte(HMC5883L_I2C_ADDR, 0x01, 0x00);
	bmpID = i2c_read_single_byte(HMC5883L_I2C_ADDR, 12);
 8000822:	210c      	movs	r1, #12
 8000824:	201e      	movs	r0, #30
 8000826:	f000 f9c5 	bl	8000bb4 <i2c_read_single_byte>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	4b43      	ldr	r3, [pc, #268]	; (800093c <main+0x2e4>)
 8000830:	701a      	strb	r2, [r3, #0]

	ms5611_reset();
 8000832:	f000 fbd3 	bl	8000fdc <ms5611_reset>

	for(;;){


		mpu6050_read_burst(59, 14, mpu6050_data_buffer);
 8000836:	4a43      	ldr	r2, [pc, #268]	; (8000944 <main+0x2ec>)
 8000838:	210e      	movs	r1, #14
 800083a:	203b      	movs	r0, #59	; 0x3b
 800083c:	f000 fb44 	bl	8000ec8 <mpu6050_read_burst>

		accX_raw = (mpu6050_data_buffer[0] << 8) | mpu6050_data_buffer[1];
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <main+0x2ec>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	b21a      	sxth	r2, r3
 8000848:	4b3e      	ldr	r3, [pc, #248]	; (8000944 <main+0x2ec>)
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21a      	sxth	r2, r3
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <main+0x2a4>)
 8000854:	801a      	strh	r2, [r3, #0]
		accY_raw = (mpu6050_data_buffer[2] << 8) | mpu6050_data_buffer[3];
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <main+0x2ec>)
 8000858:	789b      	ldrb	r3, [r3, #2]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <main+0x2ec>)
 8000860:	78db      	ldrb	r3, [r3, #3]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21a      	sxth	r2, r3
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <main+0x2a0>)
 800086a:	801a      	strh	r2, [r3, #0]
		accZ_raw = (mpu6050_data_buffer[4] << 8) | mpu6050_data_buffer[5];
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <main+0x2ec>)
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <main+0x2ec>)
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21a      	sxth	r2, r3
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <main+0x29c>)
 8000880:	801a      	strh	r2, [r3, #0]

		accX = (float)accX_raw / ACCELEROMETER_SENSITIVITY;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <main+0x2a4>)
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd2b 	bl	80002e4 <__aeabi_i2f>
 800088e:	4603      	mov	r3, r0
 8000890:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe2d 	bl	80004f4 <__aeabi_fdiv>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <main+0x2b0>)
 80008a0:	601a      	str	r2, [r3, #0]
		accY = (float)accY_raw / ACCELEROMETER_SENSITIVITY;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <main+0x2a0>)
 80008a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fd1b 	bl	80002e4 <__aeabi_i2f>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe1d 	bl	80004f4 <__aeabi_fdiv>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <main+0x2ac>)
 80008c0:	601a      	str	r2, [r3, #0]
		accZ = (float)accZ_raw / ACCELEROMETER_SENSITIVITY;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <main+0x29c>)
 80008c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd0b 	bl	80002e4 <__aeabi_i2f>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe0d 	bl	80004f4 <__aeabi_fdiv>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <main+0x2a8>)
 80008e0:	601a      	str	r2, [r3, #0]

		temperature = ((int16_t) ((mpu6050_data_buffer[6] << 8) | mpu6050_data_buffer[7]) / 340.0f) + 36.53f;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <main+0x2ec>)
 80008e4:	799b      	ldrb	r3, [r3, #6]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <main+0x2ec>)
 80008ec:	79db      	ldrb	r3, [r3, #7]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	e029      	b.n	8000948 <main+0x2f0>
 80008f4:	20000040 	.word	0x20000040
 80008f8:	20000044 	.word	0x20000044
 80008fc:	20000046 	.word	0x20000046
 8000900:	20000034 	.word	0x20000034
 8000904:	20000050 	.word	0x20000050
 8000908:	20000054 	.word	0x20000054
 800090c:	20000030 	.word	0x20000030
 8000910:	20000058 	.word	0x20000058
 8000914:	20000032 	.word	0x20000032
 8000918:	2000003c 	.word	0x2000003c
 800091c:	2000004c 	.word	0x2000004c
 8000920:	2000002c 	.word	0x2000002c
 8000924:	20000038 	.word	0x20000038
 8000928:	40021000 	.word	0x40021000
 800092c:	40011000 	.word	0x40011000
 8000930:	40010800 	.word	0x40010800
 8000934:	e000e100 	.word	0xe000e100
 8000938:	40010c00 	.word	0x40010c00
 800093c:	20000042 	.word	0x20000042
 8000940:	00014820 	.word	0x00014820
 8000944:	2000001c 	.word	0x2000001c
 8000948:	b21b      	sxth	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fcca 	bl	80002e4 <__aeabi_i2f>
 8000950:	4603      	mov	r3, r0
 8000952:	492e      	ldr	r1, [pc, #184]	; (8000a0c <main+0x3b4>)
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdcd 	bl	80004f4 <__aeabi_fdiv>
 800095a:	4603      	mov	r3, r0
 800095c:	492c      	ldr	r1, [pc, #176]	; (8000a10 <main+0x3b8>)
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fc0c 	bl	800017c <__addsf3>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <main+0x3bc>)
 800096a:	601a      	str	r2, [r3, #0]

		gyroX_raw = (mpu6050_data_buffer[8] << 8) | mpu6050_data_buffer[9];
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <main+0x3c0>)
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b21a      	sxth	r2, r3
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <main+0x3c0>)
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21a      	sxth	r2, r3
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <main+0x3c4>)
 8000980:	801a      	strh	r2, [r3, #0]
		gyroY_raw = (mpu6050_data_buffer[10] << 8) | mpu6050_data_buffer[11];
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <main+0x3c0>)
 8000984:	7a9b      	ldrb	r3, [r3, #10]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <main+0x3c0>)
 800098c:	7adb      	ldrb	r3, [r3, #11]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b21a      	sxth	r2, r3
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <main+0x3c8>)
 8000996:	801a      	strh	r2, [r3, #0]
		gyroZ_raw = (mpu6050_data_buffer[12] << 8) | mpu6050_data_buffer[13];
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <main+0x3c0>)
 800099a:	7b1b      	ldrb	r3, [r3, #12]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <main+0x3c0>)
 80009a2:	7b5b      	ldrb	r3, [r3, #13]
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <main+0x3cc>)
 80009ac:	801a      	strh	r2, [r3, #0]

		gyroX = (float)gyroX_raw / GYROSCOPE_SENSITIVITY;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <main+0x3c4>)
 80009b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc95 	bl	80002e4 <__aeabi_i2f>
 80009ba:	4603      	mov	r3, r0
 80009bc:	491a      	ldr	r1, [pc, #104]	; (8000a28 <main+0x3d0>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd98 	bl	80004f4 <__aeabi_fdiv>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <main+0x3d4>)
 80009ca:	601a      	str	r2, [r3, #0]
		gyroY = (float)gyroY_raw / GYROSCOPE_SENSITIVITY;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <main+0x3c8>)
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fc86 	bl	80002e4 <__aeabi_i2f>
 80009d8:	4603      	mov	r3, r0
 80009da:	4913      	ldr	r1, [pc, #76]	; (8000a28 <main+0x3d0>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd89 	bl	80004f4 <__aeabi_fdiv>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <main+0x3d8>)
 80009e8:	601a      	str	r2, [r3, #0]
		gyroZ = (float)gyroZ_raw / GYROSCOPE_SENSITIVITY;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <main+0x3cc>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc77 	bl	80002e4 <__aeabi_i2f>
 80009f6:	4603      	mov	r3, r0
 80009f8:	490b      	ldr	r1, [pc, #44]	; (8000a28 <main+0x3d0>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fd7a 	bl	80004f4 <__aeabi_fdiv>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <main+0x3dc>)
 8000a06:	601a      	str	r2, [r3, #0]
		mpu6050_read_burst(59, 14, mpu6050_data_buffer);
 8000a08:	e715      	b.n	8000836 <main+0x1de>
 8000a0a:	bf00      	nop
 8000a0c:	43aa0000 	.word	0x43aa0000
 8000a10:	42121eb8 	.word	0x42121eb8
 8000a14:	20000038 	.word	0x20000038
 8000a18:	2000001c 	.word	0x2000001c
 8000a1c:	20000032 	.word	0x20000032
 8000a20:	20000058 	.word	0x20000058
 8000a24:	20000030 	.word	0x20000030
 8000a28:	43030000 	.word	0x43030000
 8000a2c:	2000002c 	.word	0x2000002c
 8000a30:	2000004c 	.word	0x2000004c
 8000a34:	2000003c 	.word	0x2000003c

08000a38 <gpio_toggle>:
		GPIOx->BSRR = GPIO_PIN_MASK; // set bits

	return;
}

void gpio_toggle(GPIO_Type* GPIOx, uint16_t GPIO_PIN_MASK){
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]

	uint8_t pos = 0x00;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
	uint16_t hold = 0x00;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	81bb      	strh	r3, [r7, #12]
	uint16_t temp = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	817b      	strh	r3, [r7, #10]

	for (pos = 0; pos <= 15; pos++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e011      	b.n	8000a7a <gpio_toggle+0x42>

		temp = (0x01 << pos);
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	817b      	strh	r3, [r7, #10]

		if ((temp & GPIO_PIN_MASK) != 0) { // do not use "== 1" instead of "!= 0"
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	4013      	ands	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <gpio_toggle+0x3c>
			hold |= temp;
 8000a6c:	89ba      	ldrh	r2, [r7, #12]
 8000a6e:	897b      	ldrh	r3, [r7, #10]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	81bb      	strh	r3, [r7, #12]
	for (pos = 0; pos <= 15; pos++) {
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	3301      	adds	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d9ea      	bls.n	8000a56 <gpio_toggle+0x1e>
		}

	}

	GPIOx->ODR ^= hold;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	89bb      	ldrh	r3, [r7, #12]
 8000a86:	405a      	eors	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60da      	str	r2, [r3, #12]

	return;
 8000a8c:	bf00      	nop
}
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <i2c_init>:
 */


#include "mya_f103xx_i2c.h"

void i2c_init(){
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

	I2C1->CR1 |= 0x8000;	// software reset I2C1
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <i2c_init+0x78>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <i2c_init+0x78>)
 8000aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa6:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~0x8000;   // out of reset
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <i2c_init+0x78>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <i2c_init+0x78>)
 8000aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab2:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~0x01; // PE = 0
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <i2c_init+0x78>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <i2c_init+0x78>)
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]

	I2C1->CR2 &= ~0x1F;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <i2c_init+0x78>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <i2c_init+0x78>)
 8000ac6:	f023 031f 	bic.w	r3, r3, #31
 8000aca:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= 0x18; // APB1 CLK freq = 24 MHz
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <i2c_init+0x78>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <i2c_init+0x78>)
 8000ad2:	f043 0318 	orr.w	r3, r3, #24
 8000ad6:	6053      	str	r3, [r2, #4]

	/* timing */
	I2C1->CCR &= ~0xFFF;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <i2c_init+0x78>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <i2c_init+0x78>)
 8000ade:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ae2:	f023 030f 	bic.w	r3, r3, #15
 8000ae6:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= 120; // for PCLK1 = 24 MHz and I2C SCL at 100 kHz
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <i2c_init+0x78>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <i2c_init+0x78>)
 8000aee:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8000af2:	61d3      	str	r3, [r2, #28]

	I2C1->TRISE = 25; // maximum rise time
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <i2c_init+0x78>)
 8000af6:	2219      	movs	r2, #25
 8000af8:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= 0x01; // PE(peripheral enable)
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <i2c_init+0x78>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <i2c_init+0x78>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6013      	str	r3, [r2, #0]

	/* ********** */

	return;
 8000b06:	bf00      	nop
}
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400

08000b14 <i2c_start>:

void i2c_start(){
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

	// while(I2C1->SR2 & 0x2); // wait until bus is not busy
	I2C1->CR1 |= 0x100; // generate start condition
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <i2c_start+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <i2c_start+0x28>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & 0x01));   // wait until start flag is set
 8000b24:	bf00      	nop
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <i2c_start+0x28>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <i2c_start+0x12>
	return;
 8000b32:	bf00      	nop
}
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40005400 	.word	0x40005400

08000b40 <i2c_send_slave_addr_to_read>:


void i2c_send_slave_addr_to_read(uint8_t slave_addr){
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]

	volatile uint16_t temp;
	I2C1->DR = ((slave_addr << 1) | 0x1);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <i2c_send_slave_addr_to_read+0x38>)
 8000b54:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & 0x2)); // wait for end of address transmission
 8000b56:	bf00      	nop
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <i2c_send_slave_addr_to_read+0x38>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f9      	beq.n	8000b58 <i2c_send_slave_addr_to_read+0x18>
	temp = I2C1->SR2; // to clear ADDR bit
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <i2c_send_slave_addr_to_read+0x38>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	81fb      	strh	r3, [r7, #14]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40005400 	.word	0x40005400

08000b7c <i2c_send_slave_addr_to_write>:

void i2c_send_slave_addr_to_write(uint8_t slave_addr){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]

	volatile uint16_t temp;
	I2C1->DR = ((slave_addr << 1) | 0x0);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	005a      	lsls	r2, r3, #1
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <i2c_send_slave_addr_to_write+0x34>)
 8000b8c:	611a      	str	r2, [r3, #16]
	while(!I2C1_FLAG_ADDR); // wait for end of address transmission
 8000b8e:	bf00      	nop
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <i2c_send_slave_addr_to_write+0x34>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f9      	beq.n	8000b90 <i2c_send_slave_addr_to_write+0x14>
	temp = I2C1->SR2; // dummy reading just to clear ADDR bit
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <i2c_send_slave_addr_to_write+0x34>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	81fb      	strh	r3, [r7, #14]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40005400 	.word	0x40005400

08000bb4 <i2c_read_single_byte>:

uint8_t i2c_read_single_byte(uint8_t slave_addr, uint8_t register_addr){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]

	i2c_start();
 8000bc4:	f7ff ffa6 	bl	8000b14 <i2c_start>
	i2c_send_slave_addr_to_write(slave_addr);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ffd6 	bl	8000b7c <i2c_send_slave_addr_to_write>
	I2C1->DR = register_addr;
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <i2c_read_single_byte+0x5c>)
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	6113      	str	r3, [r2, #16]
	while (!I2C1_FLAG_TxE); // Wait until Tx Data Register is empty
 8000bd6:	bf00      	nop
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <i2c_read_single_byte+0x5c>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f9      	beq.n	8000bd8 <i2c_read_single_byte+0x24>
	i2c_start(); // restart
 8000be4:	f7ff ff96 	bl	8000b14 <i2c_start>
	i2c_send_slave_addr_to_read(slave_addr);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ffa8 	bl	8000b40 <i2c_send_slave_addr_to_read>
	i2c_stop(); // issue a stop before reading DR
 8000bf0:	f000 f942 	bl	8000e78 <i2c_stop>
	while(!I2C1_FLAG_RxNE); // wait till RxNE is set
 8000bf4:	bf00      	nop
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <i2c_read_single_byte+0x5c>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f9      	beq.n	8000bf6 <i2c_read_single_byte+0x42>
	return ((uint8_t)(I2C1->DR));
 8000c02:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <i2c_read_single_byte+0x5c>)
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	b2db      	uxtb	r3, r3

}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40005400 	.word	0x40005400

08000c14 <i2c_write_single_byte>:

void i2c_write_single_byte(uint8_t slave_addr, uint8_t mem_addr, uint8_t data){
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	71bb      	strb	r3, [r7, #6]
 8000c22:	4613      	mov	r3, r2
 8000c24:	717b      	strb	r3, [r7, #5]

	volatile uint16_t temp;

	I2C1->CR1 |= I2C_CR1_START;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6013      	str	r3, [r2, #0]
	while(!I2C1_FLAG_SB); // wait for SB
 8000c32:	bf00      	nop
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f9      	beq.n	8000c34 <i2c_write_single_byte+0x20>

	I2C1->DR = (slave_addr << 1); // write operation address for the slave
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	005a      	lsls	r2, r3, #1
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c46:	611a      	str	r2, [r3, #16]
	while(!I2C1_FLAG_ADDR); // wait for ADDR
 8000c48:	bf00      	nop
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f9      	beq.n	8000c4a <i2c_write_single_byte+0x36>
	temp = I2C1->SR2; // dummy read to clear ADDR
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	81fb      	strh	r3, [r7, #14]

	I2C1->DR = mem_addr;
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	6113      	str	r3, [r2, #16]
	while(!I2C1_FLAG_TxE); // wait for Tx buffer to be empty
 8000c64:	bf00      	nop
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <i2c_write_single_byte+0x52>

	I2C1->DR = data;
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c74:	797b      	ldrb	r3, [r7, #5]
 8000c76:	6113      	str	r3, [r2, #16]
	while(!I2C1_FLAG_TxE); // wait for Tx buffer to be empty
 8000c78:	bf00      	nop
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f9      	beq.n	8000c7a <i2c_write_single_byte+0x66>

	I2C1->CR1 |= I2C_CR1_STOP; // generate stop
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c90:	6013      	str	r3, [r2, #0]
	while((I2C1->CR1 & I2C_CR1_STOP)); // wait for hardware to clear STOP bit (?)
 8000c92:	bf00      	nop
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <i2c_write_single_byte+0x98>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f9      	bne.n	8000c94 <i2c_write_single_byte+0x80>

	return;
 8000ca0:	bf00      	nop
}
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400

08000cb0 <i2c_read_dma>:

void i2c_read_dma(uint8_t slave_addr, uint8_t mem_addr, uint8_t len, uint8_t *rxbuff){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	71bb      	strb	r3, [r7, #6]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	717b      	strb	r3, [r7, #5]

	// DMA clock must be enabled before
	uint16_t temp;

	/* configure I2C peripheral for DMA multi byte read */
	I2C1->CR2 |= I2C_CR2_DMAEN | I2C_CR2_LAST;
 8000cc4:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <i2c_read_dma+0x150>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	4a4d      	ldr	r2, [pc, #308]	; (8000e00 <i2c_read_dma+0x150>)
 8000cca:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000cce:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= I2C_CR1_ACK;
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <i2c_read_dma+0x150>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a4a      	ldr	r2, [pc, #296]	; (8000e00 <i2c_read_dma+0x150>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]

	/* I2C1 Rx is connected to DMA1 Channel 7 */
	DMA1->Channel7.CMAR = (uint32_t)rxbuff;
 8000cdc:	4a49      	ldr	r2, [pc, #292]	; (8000e04 <i2c_read_dma+0x154>)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	DMA1->Channel7.CPAR = (uint32_t) &(I2C1->DR);
 8000ce4:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <i2c_read_dma+0x154>)
 8000ce6:	4a48      	ldr	r2, [pc, #288]	; (8000e08 <i2c_read_dma+0x158>)
 8000ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	DMA1->Channel7.CNDTR = len;
 8000cec:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <i2c_read_dma+0x154>)
 8000cee:	797b      	ldrb	r3, [r7, #5]
 8000cf0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	DMA1->Channel7.CCR |= DMA_CCRx_TCIE | DMA_CCRx_MINC;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <i2c_read_dma+0x154>)
 8000cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cfa:	4a42      	ldr	r2, [pc, #264]	; (8000e04 <i2c_read_dma+0x154>)
 8000cfc:	f043 0382 	orr.w	r3, r3, #130	; 0x82
 8000d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1->Channel7.CCR |= DMA_CCRx_EN; // enable the DMA channel
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <i2c_read_dma+0x154>)
 8000d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d0a:	4a3e      	ldr	r2, [pc, #248]	; (8000e04 <i2c_read_dma+0x154>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	I2C1->CR1 |= I2C_CR1_START; // issue a start condition
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <i2c_read_dma+0x150>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a39      	ldr	r2, [pc, #228]	; (8000e00 <i2c_read_dma+0x150>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
	while(!I2C1_FLAG_SB); // wait for SB
 8000d20:	bf00      	nop
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <i2c_read_dma+0x150>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f9      	beq.n	8000d22 <i2c_read_dma+0x72>

	I2C1->DR = (slave_addr << 1); // write operation address for the slave
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	005a      	lsls	r2, r3, #1
 8000d32:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <i2c_read_dma+0x150>)
 8000d34:	611a      	str	r2, [r3, #16]
	while(!I2C1_FLAG_ADDR); // wait for ADDR
 8000d36:	bf00      	nop
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <i2c_read_dma+0x150>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f9      	beq.n	8000d38 <i2c_read_dma+0x88>
	temp = I2C1->SR2; // dummy read to clear ADDR
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <i2c_read_dma+0x150>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	81fb      	strh	r3, [r7, #14]

	I2C1->DR = mem_addr;
 8000d4a:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <i2c_read_dma+0x150>)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	6113      	str	r3, [r2, #16]
	while(!I2C1_FLAG_TxE); // wait for Tx buffer to be empty
 8000d50:	bf00      	nop
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <i2c_read_dma+0x150>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f9      	beq.n	8000d52 <i2c_read_dma+0xa2>

	I2C1->CR1 |= I2C_CR1_START; // issue a restart condition
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <i2c_read_dma+0x150>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <i2c_read_dma+0x150>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]
	while(!I2C1_FLAG_SB); // wait for SB
 8000d6a:	bf00      	nop
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <i2c_read_dma+0x150>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f9      	beq.n	8000d6c <i2c_read_dma+0xbc>

	I2C1->DR = ((slave_addr << 1) | 0x01); // read operation address for the slave
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	f043 0201 	orr.w	r2, r3, #1
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <i2c_read_dma+0x150>)
 8000d82:	611a      	str	r2, [r3, #16]
	while(!I2C1_FLAG_ADDR); // wait for ADDR
 8000d84:	bf00      	nop
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <i2c_read_dma+0x150>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f9      	beq.n	8000d86 <i2c_read_dma+0xd6>
	temp = I2C1->SR2; // dummy read to clear ADDR
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <i2c_read_dma+0x150>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	81fb      	strh	r3, [r7, #14]

	while ((DMA1->ISR & 0x02000000) == 0); // wait till transfer is completed (INTERRUPT!!)
 8000d98:	bf00      	nop
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <i2c_read_dma+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <i2c_read_dma+0xea>
	DMA1->Channel7.CCR &= ~DMA_CCRx_EN; // disable the DMA channel
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <i2c_read_dma+0x154>)
 8000da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <i2c_read_dma+0x154>)
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1->IFCR |= 0x02000000; // clear the flag
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <i2c_read_dma+0x154>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <i2c_read_dma+0x154>)
 8000dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc0:	6053      	str	r3, [r2, #4]

	I2C1->CR1 |= I2C_CR1_STOP;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <i2c_read_dma+0x150>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <i2c_read_dma+0x150>)
 8000dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dcc:	6013      	str	r3, [r2, #0]
	while (I2C1->CR1 & I2C_CR1_STOP); // w8 until stop bit is cleared by hw
 8000dce:	bf00      	nop
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <i2c_read_dma+0x150>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f9      	bne.n	8000dd0 <i2c_read_dma+0x120>

	/* bring I2C settings back to normal */
	I2C1->CR2 &= ~(I2C_CR2_DMAEN | I2C_CR2_LAST);
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <i2c_read_dma+0x150>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <i2c_read_dma+0x150>)
 8000de2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000de6:	6053      	str	r3, [r2, #4]
	I2C1->CR1 &= ~I2C_CR1_ACK;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <i2c_read_dma+0x150>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <i2c_read_dma+0x150>)
 8000dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]

}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40005410 	.word	0x40005410

08000e0c <i2c_logical_or>:

/* reads a byte from the slave memory and applies logical or with @operand, then
 * writes it back.
 */
void i2c_logical_or(uint8_t slave_addr, uint8_t register_addr, uint8_t operand){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	460b      	mov	r3, r1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	717b      	strb	r3, [r7, #5]

	uint8_t temp;
	temp = i2c_read_single_byte(slave_addr, register_addr);
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fec5 	bl	8000bb4 <i2c_read_single_byte>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]
	temp = temp | operand;
 8000e2e:	7bfa      	ldrb	r2, [r7, #15]
 8000e30:	797b      	ldrb	r3, [r7, #5]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	73fb      	strb	r3, [r7, #15]
	i2c_write_single_byte(slave_addr, register_addr, temp);
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	79b9      	ldrb	r1, [r7, #6]
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fee9 	bl	8000c14 <i2c_write_single_byte>
	return;
 8000e42:	bf00      	nop
}
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <i2c_send_byte_to_bus>:

void i2c_send_byte_to_bus(uint8_t byte){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = byte;
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <i2c_send_byte_to_bus+0x28>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	6113      	str	r3, [r2, #16]
	while(!I2C1_FLAG_TxE); // wait for Tx buffer to be empty
 8000e5c:	bf00      	nop
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <i2c_send_byte_to_bus+0x28>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <i2c_send_byte_to_bus+0x12>

	return;
 8000e6a:	bf00      	nop
}
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40005400 	.word	0x40005400

08000e78 <i2c_stop>:

void i2c_stop(){
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

	// while (!(I2C1->SR1 & 0x04));	// wait until transfer finished
	I2C1->CR1 |= I2C_CR1_STOP;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <i2c_stop+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <i2c_stop+0x28>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
	while (I2C1->CR1 & I2C_CR1_STOP); // w8 until stop bit is cleared by hw
 8000e88:	bf00      	nop
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <i2c_stop+0x28>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f9      	bne.n	8000e8a <i2c_stop+0x12>
	return;
 8000e96:	bf00      	nop
}
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40005400 	.word	0x40005400

08000ea4 <mpu6050_write>:
 */


#include "mya_f103xx_mpu6050.h"

void mpu6050_write(uint8_t reg_addr, uint8_t data){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]

	i2c_write_single_byte(MPU6050_I2C_ADDR, reg_addr, data);
 8000eb4:	79ba      	ldrb	r2, [r7, #6]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2068      	movs	r0, #104	; 0x68
 8000ebc:	f7ff feaa 	bl	8000c14 <i2c_write_single_byte>

}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <mpu6050_read_burst>:

void mpu6050_read_burst(uint8_t start_reg_addr, uint8_t num_bytes, uint8_t *data_container){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	603a      	str	r2, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	71bb      	strb	r3, [r7, #6]

	i2c_read_dma(MPU6050_I2C_ADDR, start_reg_addr, num_bytes, data_container);
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	79f9      	ldrb	r1, [r7, #7]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2068      	movs	r0, #104	; 0x68
 8000ee0:	f7ff fee6 	bl	8000cb0 <i2c_read_dma>

}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <mpu6050_wake_up>:

void mpu6050_wake_up(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

	mpu6050_write(MPU6050_PWR_MGMT_1, 0x00);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	206b      	movs	r0, #107	; 0x6b
 8000ef4:	f7ff ffd6 	bl	8000ea4 <mpu6050_write>

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <mpu6050_i2c_bypass_en>:

void mpu6050_i2c_bypass_en(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

	i2c_logical_or(MPU6050_I2C_ADDR, MPU6050_INT_PIN_CFG, MPU6050_INT_PIN_CFG_I2C_BYPASS_EN);
 8000f00:	2202      	movs	r2, #2
 8000f02:	2137      	movs	r1, #55	; 0x37
 8000f04:	2068      	movs	r0, #104	; 0x68
 8000f06:	f7ff ff81 	bl	8000e0c <i2c_logical_or>

	return;
 8000f0a:	bf00      	nop
}
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <clock_config>:
 */

#include "mya_f103xx_rcc.h"

/* sets system clock to 8 x PLLMUL */
void clock_config(){
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON; // HSEON -> 1 Enable HSE clock
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <clock_config+0xc8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <clock_config+0xc8>)
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)) {;} // w8 for HSERDY flag
 8000f20:	bf00      	nop
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <clock_config+0xc8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f9      	beq.n	8000f22 <clock_config+0x12>

	/* disable PLL before changes */
	RCC->CR &= ~RCC_CR_PLLON;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <clock_config+0xc8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <clock_config+0xc8>)
 8000f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f38:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)) {} // wait till PLL is unlocked
 8000f3a:	bf00      	nop
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <clock_config+0xc8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f9      	bne.n	8000f3c <clock_config+0x2c>

	RCC->CFGR |= RCC_CFGR_PLLSRC; // HSE selected as PLL source
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <clock_config+0xc8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <clock_config+0xc8>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f52:	6053      	str	r3, [r2, #4]

	/* set PLL multiplier value */
	RCC->CFGR &= ~(RCC_CFGR_PLLMUL); // reset first
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <clock_config+0xc8>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <clock_config+0xc8>)
 8000f5a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000f5e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMUL_MUL3; // PLL multiplier = 3
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <clock_config+0xc8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <clock_config+0xc8>)
 8000f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6a:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_HPRE; // AHB prescaler = 1
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <clock_config+0xc8>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <clock_config+0xc8>)
 8000f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f76:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB1 prescaler = 1
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <clock_config+0xc8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <clock_config+0xc8>)
 8000f7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f82:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB2 prescaler = 1
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <clock_config+0xc8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <clock_config+0xc8>)
 8000f8a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f8e:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON; // activate PLL
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <clock_config+0xc8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <clock_config+0xc8>)
 8000f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)) {} // wait till PLL is locked/ready
 8000f9c:	bf00      	nop
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <clock_config+0xc8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f9      	beq.n	8000f9e <clock_config+0x8e>

	RCC->CFGR &= ~RCC_CFGR_SW;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <clock_config+0xc8>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <clock_config+0xc8>)
 8000fb0:	f023 0303 	bic.w	r3, r3, #3
 8000fb4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // choose PLL as system clock
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <clock_config+0xc8>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <clock_config+0xc8>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6053      	str	r3, [r2, #4]
	/* Wait for SYSCLK to be PPL */
	while((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000fc2:	bf00      	nop
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <clock_config+0xc8>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d1f9      	bne.n	8000fc4 <clock_config+0xb4>

	return;
 8000fd0:	bf00      	nop

}
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <ms5611_reset>:


#include "mya_ms5611.h"


void ms5611_reset(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

	i2c_start();
 8000fe0:	f7ff fd98 	bl	8000b14 <i2c_start>
	i2c_send_slave_addr_to_write(MS5611_I2C_ADDR);
 8000fe4:	2077      	movs	r0, #119	; 0x77
 8000fe6:	f7ff fdc9 	bl	8000b7c <i2c_send_slave_addr_to_write>
	i2c_send_byte_to_bus(MS5611_COMMAND_RESET);
 8000fea:	201e      	movs	r0, #30
 8000fec:	f7ff ff2e 	bl	8000e4c <i2c_send_byte_to_bus>
	i2c_stop();
 8000ff0:	f7ff ff42 	bl	8000e78 <i2c_stop>
	return;
 8000ff4:	bf00      	nop
}
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490e      	ldr	r1, [pc, #56]	; (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0b      	ldr	r4, [pc, #44]	; (8001044 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001022:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001026:	f000 f811 	bl	800104c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102a:	f7ff fb15 	bl	8000658 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   r0, =_estack
 8001030:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800103c:	080010b4 	.word	0x080010b4
  ldr r2, =_sbss
 8001040:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001044:	2000005c 	.word	0x2000005c

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>
	...

0800104c <__libc_init_array>:
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	2500      	movs	r5, #0
 8001050:	4e0c      	ldr	r6, [pc, #48]	; (8001084 <__libc_init_array+0x38>)
 8001052:	4c0d      	ldr	r4, [pc, #52]	; (8001088 <__libc_init_array+0x3c>)
 8001054:	1ba4      	subs	r4, r4, r6
 8001056:	10a4      	asrs	r4, r4, #2
 8001058:	42a5      	cmp	r5, r4
 800105a:	d109      	bne.n	8001070 <__libc_init_array+0x24>
 800105c:	f000 f81a 	bl	8001094 <_init>
 8001060:	2500      	movs	r5, #0
 8001062:	4e0a      	ldr	r6, [pc, #40]	; (800108c <__libc_init_array+0x40>)
 8001064:	4c0a      	ldr	r4, [pc, #40]	; (8001090 <__libc_init_array+0x44>)
 8001066:	1ba4      	subs	r4, r4, r6
 8001068:	10a4      	asrs	r4, r4, #2
 800106a:	42a5      	cmp	r5, r4
 800106c:	d105      	bne.n	800107a <__libc_init_array+0x2e>
 800106e:	bd70      	pop	{r4, r5, r6, pc}
 8001070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001074:	4798      	blx	r3
 8001076:	3501      	adds	r5, #1
 8001078:	e7ee      	b.n	8001058 <__libc_init_array+0xc>
 800107a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800107e:	4798      	blx	r3
 8001080:	3501      	adds	r5, #1
 8001082:	e7f2      	b.n	800106a <__libc_init_array+0x1e>
 8001084:	080010ac 	.word	0x080010ac
 8001088:	080010ac 	.word	0x080010ac
 800108c:	080010ac 	.word	0x080010ac
 8001090:	080010b0 	.word	0x080010b0

08001094 <_init>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr

080010a0 <_fini>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr
