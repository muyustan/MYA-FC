
MYA-FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800042c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800042c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000049f  00000000  00000000  00010455  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000016d  00000000  00000000  000108f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  00010a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001155  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000841  00000000  00000000  00011c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000044bf  00000000  00000000  000124c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d0  00000000  00000000  00016a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800040c 	.word	0x0800040c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800040c 	.word	0x0800040c

08000170 <TIM2_IRQHandler>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void TIM2_IRQHandler(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	// GPIOC->ODR ^= (0x1 << 13);
	TIM2->SR &= ~(0x01); // clear UIF
 8000174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000178:	691b      	ldr	r3, [r3, #16]
 800017a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800017e:	f023 0301 	bic.w	r3, r3, #1
 8000182:	6113      	str	r3, [r2, #16]
	return;
 8000184:	bf00      	nop
}
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <main>:


int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

	clock_config();
 8000190:	f000 f888 	bl	80002a4 <clock_config>
	GPIOA_EN(); // pwm
 8000194:	4b3f      	ldr	r3, [pc, #252]	; (8000294 <main+0x108>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a3e      	ldr	r2, [pc, #248]	; (8000294 <main+0x108>)
 800019a:	f043 0304 	orr.w	r3, r3, #4
 800019e:	6193      	str	r3, [r2, #24]
	GPIOB_EN(); // i2c
 80001a0:	4b3c      	ldr	r3, [pc, #240]	; (8000294 <main+0x108>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a3b      	ldr	r2, [pc, #236]	; (8000294 <main+0x108>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
	GPIOC_EN(); // led
 80001ac:	4b39      	ldr	r3, [pc, #228]	; (8000294 <main+0x108>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a38      	ldr	r2, [pc, #224]	; (8000294 <main+0x108>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
	AFIO_EN();
 80001b8:	4b36      	ldr	r3, [pc, #216]	; (8000294 <main+0x108>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a35      	ldr	r2, [pc, #212]	; (8000294 <main+0x108>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	6193      	str	r3, [r2, #24]
	TIM2_EN(); // pwm
 80001c4:	4b33      	ldr	r3, [pc, #204]	; (8000294 <main+0x108>)
 80001c6:	69db      	ldr	r3, [r3, #28]
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <main+0x108>)
 80001ca:	f043 0301 	orr.w	r3, r3, #1
 80001ce:	61d3      	str	r3, [r2, #28]

	GPIOC->CRH = 0x300000;
 80001d0:	4b31      	ldr	r3, [pc, #196]	; (8000298 <main+0x10c>)
 80001d2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80001d6:	605a      	str	r2, [r3, #4]
	GPIOC->BSRR |= 0x2000;
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <main+0x10c>)
 80001da:	691b      	ldr	r3, [r3, #16]
 80001dc:	4a2e      	ldr	r2, [pc, #184]	; (8000298 <main+0x10c>)
 80001de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001e2:	6113      	str	r3, [r2, #16]

	GPIOA->CRL |= 0x01; // output mode for PA0
 80001e4:	4b2d      	ldr	r3, [pc, #180]	; (800029c <main+0x110>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a2c      	ldr	r2, [pc, #176]	; (800029c <main+0x110>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(0x0C);
 80001f0:	4b2a      	ldr	r3, [pc, #168]	; (800029c <main+0x110>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a29      	ldr	r2, [pc, #164]	; (800029c <main+0x110>)
 80001f6:	f023 030c 	bic.w	r3, r3, #12
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x08; // AF push-pull
 80001fc:	4b27      	ldr	r3, [pc, #156]	; (800029c <main+0x110>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a26      	ldr	r2, [pc, #152]	; (800029c <main+0x110>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 23; // Timer counts at 1 MHz
 8000208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020c:	2217      	movs	r2, #23
 800020e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 19999;  // set frequency of counter overflow to 50 Hz
 8000210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000214:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
	// CCR = 999 : 1000 us
	// CCR = 1999 : 2000 us
	// desired pulse width (us) = x ;
	// CCR = x - 1

	TIM2->CCR1 = 1299;
 800021a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021e:	f240 5213 	movw	r2, #1299	; 0x513
 8000222:	635a      	str	r2, [r3, #52]	; 0x34

	TIM2->DIER |= 0x01; // update interrupt enable
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 &= ~(0x03); // set CC1 channel as output channel
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	f023 0303 	bic.w	r3, r3, #3
 8000242:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(0b111 << 4);
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000252:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0b110 << 4); // PWM mode 1
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800025e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000262:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= 0x01; // CC1E enable the channel
 8000264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= 0x01; // Counter Enable (CEN)
 8000274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6013      	str	r3, [r2, #0]

	NVIC->ISER[0] |= 0x01 << 28; // enable TIM2 global interrupt
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x114>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <main+0x114>)
 800028a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800028e:	6013      	str	r3, [r2, #0]

	for(;;){
 8000290:	e7fe      	b.n	8000290 <main+0x104>
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40011000 	.word	0x40011000
 800029c:	40010800 	.word	0x40010800
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <clock_config>:
 */

#include "mya_f103xx_rcc.h"

/* sets system clock to 8 x PLLMUL */
void clock_config(){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON; // HSEON -> 1 Enable HSE clock
 80002a8:	4b30      	ldr	r3, [pc, #192]	; (800036c <clock_config+0xc8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2f      	ldr	r2, [pc, #188]	; (800036c <clock_config+0xc8>)
 80002ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002b2:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)) {;} // w8 for HSERDY flag
 80002b4:	bf00      	nop
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <clock_config+0xc8>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <clock_config+0x12>

	/* disable PLL before changes */
	RCC->CR &= ~RCC_CR_PLLON;
 80002c2:	4b2a      	ldr	r3, [pc, #168]	; (800036c <clock_config+0xc8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a29      	ldr	r2, [pc, #164]	; (800036c <clock_config+0xc8>)
 80002c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002cc:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)) {} // wait till PLL is unlocked
 80002ce:	bf00      	nop
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <clock_config+0xc8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1f9      	bne.n	80002d0 <clock_config+0x2c>

	RCC->CFGR |= RCC_CFGR_PLLSRC; // HSE selected as PLL source
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <clock_config+0xc8>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a22      	ldr	r2, [pc, #136]	; (800036c <clock_config+0xc8>)
 80002e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002e6:	6053      	str	r3, [r2, #4]

	/* set PLL multiplier value */
	RCC->CFGR &= ~(RCC_CFGR_PLLMUL); // reset first
 80002e8:	4b20      	ldr	r3, [pc, #128]	; (800036c <clock_config+0xc8>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a1f      	ldr	r2, [pc, #124]	; (800036c <clock_config+0xc8>)
 80002ee:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80002f2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMUL_MUL3; // PLL multiplier = 3
 80002f4:	4b1d      	ldr	r3, [pc, #116]	; (800036c <clock_config+0xc8>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a1c      	ldr	r2, [pc, #112]	; (800036c <clock_config+0xc8>)
 80002fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002fe:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_HPRE; // AHB prescaler = 1
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <clock_config+0xc8>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a19      	ldr	r2, [pc, #100]	; (800036c <clock_config+0xc8>)
 8000306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800030a:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB1 prescaler = 1
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <clock_config+0xc8>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a16      	ldr	r2, [pc, #88]	; (800036c <clock_config+0xc8>)
 8000312:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000316:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB2 prescaler = 1
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <clock_config+0xc8>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <clock_config+0xc8>)
 800031e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000322:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON; // activate PLL
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <clock_config+0xc8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a10      	ldr	r2, [pc, #64]	; (800036c <clock_config+0xc8>)
 800032a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800032e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)) {} // wait till PLL is locked/ready
 8000330:	bf00      	nop
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <clock_config+0xc8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <clock_config+0x8e>

	RCC->CFGR &= ~RCC_CFGR_SW;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <clock_config+0xc8>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <clock_config+0xc8>)
 8000344:	f023 0303 	bic.w	r3, r3, #3
 8000348:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // choose PLL as system clock
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <clock_config+0xc8>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <clock_config+0xc8>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	6053      	str	r3, [r2, #4]
	/* Wait for SYSCLK to be PPL */
	while((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000356:	bf00      	nop
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <clock_config+0xc8>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f003 0308 	and.w	r3, r3, #8
 8000360:	2b08      	cmp	r3, #8
 8000362:	d1f9      	bne.n	8000358 <clock_config+0xb4>

	return;
 8000364:	bf00      	nop

}
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490e      	ldr	r1, [pc, #56]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0b      	ldr	r4, [pc, #44]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800039a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff fef3 	bl	800018c <main>

080003a6 <LoopForever>:

LoopForever:
    b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	2500      	movs	r5, #0
 80003c8:	4e0c      	ldr	r6, [pc, #48]	; (80003fc <__libc_init_array+0x38>)
 80003ca:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003cc:	1ba4      	subs	r4, r4, r6
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	f000 f81a 	bl	800040c <_init>
 80003d8:	2500      	movs	r5, #0
 80003da:	4e0a      	ldr	r6, [pc, #40]	; (8000404 <__libc_init_array+0x40>)
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <__libc_init_array+0x44>)
 80003de:	1ba4      	subs	r4, r4, r6
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	42a5      	cmp	r5, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ec:	4798      	blx	r3
 80003ee:	3501      	adds	r5, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f6:	4798      	blx	r3
 80003f8:	3501      	adds	r5, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
